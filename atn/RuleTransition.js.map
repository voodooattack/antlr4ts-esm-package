{"version":3,"file":"RuleTransition.js","sourceRoot":"","sources":["../../../src/atn/RuleTransition.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;;;;;;AAKH,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AAElD,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAG1C,MAAM;AACC,IAAM,cAAc,GAApB,MAAM,cAAe,SAAQ,UAAU;IAa7C,YAAqB,SAAyB,EAAE,SAAiB,EAAE,UAAkB,EAAW,WAAqB;QACpH,KAAK,CAAC,SAAS,CAAC,CAAC;QAJX,aAAQ,GAAY,KAAK,CAAC;QAC1B,sBAAiB,GAAY,KAAK,CAAC;QAIzC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IAChC,CAAC;IAGD,IAAI,iBAAiB;QACpB,mCAA2B;IAC5B,CAAC;IAGD,IAAI,SAAS;QACZ,OAAO,IAAI,CAAC;IACb,CAAC;IAGM,OAAO,CAAC,MAAc,EAAE,cAAsB,EAAE,cAAsB;QAC5E,OAAO,KAAK,CAAC;IACd,CAAC;CACD,CAAA;AA1BA;IADC,OAAO;mDACqB;AAa7B;IADC,QAAQ;uDAGR;AAGD;IADC,QAAQ;+CAGR;AAGD;IADC,QAAQ;6CAGR;AAjCW,cAAc;IAab,WAAA,OAAO,CAAA;IAAoE,WAAA,OAAO,CAAA;GAbnF,cAAc,CAkC1B;SAlCY,cAAc","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:36.8294453-07:00\n\nimport { ATNState } from \"./ATNState\";\nimport { Override, NotNull } from \"../Decorators\";\nimport { RuleStartState } from \"./RuleStartState\";\nimport { Transition } from \"./Transition\";\nimport { TransitionType } from \"./TransitionType\";\n\n/** */\nexport class RuleTransition extends Transition {\n\t/** Ptr to the rule definition object for this rule ref */\n\tpublic ruleIndex: number;      // no Rule object at runtime\n\n\tpublic precedence: number;\n\n\t/** What node to begin computations following ref to rule */\n\t@NotNull\n\tpublic followState: ATNState;\n\n\tpublic tailCall: boolean = false;\n\tpublic optimizedTailCall: boolean = false;\n\n\tconstructor(@NotNull ruleStart: RuleStartState, ruleIndex: number, precedence: number, @NotNull followState: ATNState) {\n\t\tsuper(ruleStart);\n\t\tthis.ruleIndex = ruleIndex;\n\t\tthis.precedence = precedence;\n\t\tthis.followState = followState;\n\t}\n\n\t@Override\n\tget serializationType(): TransitionType {\n\t\treturn TransitionType.RULE;\n\t}\n\n\t@Override\n\tget isEpsilon(): boolean {\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic matches(symbol: number, minVocabSymbol: number, maxVocabSymbol: number): boolean {\n\t\treturn false;\n\t}\n}\n"]}