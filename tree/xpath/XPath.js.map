{"version":3,"file":"XPath.js","sourceRoot":"","sources":["../../../../src/tree/xpath/XPath.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:46.4373888-07:00\n\nimport { CharStreams } from \"../../CharStreams.js\"\nimport { CommonTokenStream } from \"../../CommonTokenStream.js\"\nimport { LexerNoViableAltException } from \"../../LexerNoViableAltException.js\"\nimport { Parser } from \"../../Parser.js\"\nimport { ParserRuleContext } from \"../../ParserRuleContext.js\"\nimport { ParseTree } from \"../ParseTree.js\"\nimport { Token } from \"../../Token.js\"\nimport { XPathElement } from \"./XPathElement.js\"\nimport { XPathLexer } from \"./XPathLexer.js\"\nimport { XPathLexerErrorListener } from \"./XPathLexerErrorListener.js\"\nimport { XPathRuleAnywhereElement } from \"./XPathRuleAnywhereElement.js\"\nimport { XPathRuleElement } from \"./XPathRuleElement.js\"\nimport { XPathTokenAnywhereElement } from \"./XPathTokenAnywhereElement.js\"\nimport { XPathTokenElement } from \"./XPathTokenElement.js\"\nimport { XPathWildcardAnywhereElement } from \"./XPathWildcardAnywhereElement.js\"\nimport { XPathWildcardElement } from \"./XPathWildcardElement.js\"\n\n/**\n * Represent a subset of XPath XML path syntax for use in identifying nodes in\n * parse trees.\n *\n * Split path into words and separators `/` and `//` via ANTLR\n * itself then walk path elements from left to right. At each separator-word\n * pair, find set of nodes. Next stage uses those as work list.\n *\n * The basic interface is\n * {@link XPath#findAll ParseTree.findAll}`(tree, pathString, parser)`.\n * But that is just shorthand for:\n *\n * ```\n * let p = new XPath(parser, pathString);\n * return p.evaluate(tree);\n * ```\n *\n * See `TestXPath` for descriptions. In short, this\n * allows operators:\n *\n * | | |\n * | --- | --- |\n * | `/` | root |\n * | `//` | anywhere |\n * | `!` | invert; this much appear directly after root or anywhere operator |\n *\n * and path elements:\n *\n * | | |\n * | --- | --- |\n * | `ID` | token name |\n * | `'string'` | any string literal token from the grammar |\n * | `expr` | rule name |\n * | `*` | wildcard matching any node |\n *\n * Whitespace is not allowed.\n */\nexport class XPath {\n\tpublic static readonly WILDCARD: string = \"*\"; // word not operator/separator\n\tpublic static readonly NOT: string = \"!\"; \t   // word for invert operator\n\n\tprotected path: string;\n\tprotected elements: XPathElement[];\n\tprotected parser: Parser;\n\n\tconstructor(parser: Parser, path: string) {\n\t\tthis.parser = parser;\n\t\tthis.path = path;\n\t\tthis.elements = this.split(path);\n\t\t// console.log(this.elements.toString());\n\t}\n\n\t// TODO: check for invalid token/rule names, bad syntax\n\n\tpublic split(path: string): XPathElement[] {\n\t\tlet lexer = new XPathLexer(CharStreams.fromString(path));\n\t\tlexer.recover = (e: LexerNoViableAltException) => { throw e; };\n\n\t\tlexer.removeErrorListeners();\n\t\tlexer.addErrorListener(new XPathLexerErrorListener());\n\t\tlet tokenStream = new CommonTokenStream(lexer);\n\t\ttry {\n\t\t\ttokenStream.fill();\n\t\t}\n\t\tcatch (e) {\n\t\t\tif (e instanceof LexerNoViableAltException) {\n\t\t\t\tlet pos: number = lexer.charPositionInLine;\n\t\t\t\tlet msg: string = \"Invalid tokens or characters at index \" + pos + \" in path '\" + path + \"' -- \" + e.message;\n\t\t\t\tthrow new RangeError(msg);\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\n\t\tlet tokens: Token[] = tokenStream.getTokens();\n\t\t// console.log(\"path=\" + path + \"=>\" + tokens);\n\t\tlet elements: XPathElement[] = [];\n\t\tlet n: number = tokens.length;\n\t\tlet i: number = 0;\n\t\tloop:\n\t\twhile (i < n) {\n\t\t\tlet el: Token = tokens[i];\n\t\t\tlet next: Token | undefined;\n\t\t\tswitch (el.type) {\n\t\t\t\tcase XPathLexer.ROOT:\n\t\t\t\tcase XPathLexer.ANYWHERE:\n\t\t\t\t\tlet anywhere: boolean = el.type === XPathLexer.ANYWHERE;\n\t\t\t\t\ti++;\n\t\t\t\t\tnext = tokens[i];\n\t\t\t\t\tlet invert: boolean = next.type === XPathLexer.BANG;\n\t\t\t\t\tif (invert) {\n\t\t\t\t\t\ti++;\n\t\t\t\t\t\tnext = tokens[i];\n\t\t\t\t\t}\n\t\t\t\t\tlet pathElement: XPathElement = this.getXPathElement(next, anywhere);\n\t\t\t\t\tpathElement.invert = invert;\n\t\t\t\t\telements.push(pathElement);\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase XPathLexer.TOKEN_REF:\n\t\t\t\tcase XPathLexer.RULE_REF:\n\t\t\t\tcase XPathLexer.WILDCARD:\n\t\t\t\t\telements.push(this.getXPathElement(el, false));\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase Token.EOF:\n\t\t\t\t\tbreak loop;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"Unknowth path element \" + el);\n\t\t\t}\n\t\t}\n\t\treturn elements;\n\t}\n\n\t/**\n\t * Convert word like `*` or `ID` or `expr` to a path\n\t * element. `anywhere` is `true` if `//` precedes the\n\t * word.\n\t */\n\tprotected getXPathElement(wordToken: Token, anywhere: boolean): XPathElement {\n\t\tif (wordToken.type === Token.EOF) {\n\t\t\tthrow new Error(\"Missing path element at end of path\");\n\t\t}\n\n\t\tlet word = wordToken.text;\n\t\tif (word == null) {\n\t\t\tthrow new Error(\"Expected wordToken to have text content.\");\n\t\t}\n\n\t\tlet ttype: number = this.parser.getTokenType(word);\n\t\tlet ruleIndex: number = this.parser.getRuleIndex(word);\n\t\tswitch (wordToken.type) {\n\t\t\tcase XPathLexer.WILDCARD:\n\t\t\t\treturn anywhere ?\n\t\t\t\t\tnew XPathWildcardAnywhereElement() :\n\t\t\t\t\tnew XPathWildcardElement();\n\t\t\tcase XPathLexer.TOKEN_REF:\n\t\t\tcase XPathLexer.STRING:\n\t\t\t\tif (ttype === Token.INVALID_TYPE) {\n\t\t\t\t\tthrow new Error(word + \" at index \" +\n\t\t\t\t\t\twordToken.startIndex +\n\t\t\t\t\t\t\" isn't a valid token name\");\n\t\t\t\t}\n\t\t\t\treturn anywhere ?\n\t\t\t\t\tnew XPathTokenAnywhereElement(word, ttype) :\n\t\t\t\t\tnew XPathTokenElement(word, ttype);\n\t\t\tdefault:\n\t\t\t\tif (ruleIndex === -1) {\n\t\t\t\t\tthrow new Error(word + \" at index \" +\n\t\t\t\t\t\twordToken.startIndex +\n\t\t\t\t\t\t\" isn't a valid rule name\");\n\t\t\t\t}\n\t\t\t\treturn anywhere ?\n\t\t\t\t\tnew XPathRuleAnywhereElement(word, ruleIndex) :\n\t\t\t\t\tnew XPathRuleElement(word, ruleIndex);\n\t\t}\n\t}\n\n\tpublic static findAll(tree: ParseTree, xpath: string, parser: Parser): Set<ParseTree> {\n\t\tlet p: XPath = new XPath(parser, xpath);\n\t\treturn p.evaluate(tree);\n\t}\n\n\t/**\n\t * Return a list of all nodes starting at `t` as root that satisfy the\n\t * path. The root `/` is relative to the node passed to {@link evaluate}.\n\t */\n\tpublic evaluate(t: ParseTree): Set<ParseTree> {\n\t\tlet dummyRoot = new ParserRuleContext();\n\t\tdummyRoot.addChild(t as ParserRuleContext);\n\n\t\tlet work = new Set<ParseTree>([dummyRoot]);\n\n\t\tlet i: number = 0;\n\t\twhile (i < this.elements.length) {\n\t\t\tlet next = new Set<ParseTree>();\n\t\t\tfor (let node of work) {\n\t\t\t\tif (node.childCount > 0) {\n\t\t\t\t\t// only try to match next element if it has children\n\t\t\t\t\t// e.g., //func/*/stat might have a token node for which\n\t\t\t\t\t// we can't go looking for stat nodes.\n\t\t\t\t\tlet matching = this.elements[i].evaluate(node);\n\t\t\t\t\tmatching.forEach(next.add, next);\n\t\t\t\t}\n\t\t\t}\n\t\t\ti++;\n\t\t\twork = next;\n\t\t}\n\n\t\treturn work;\n\t}\n}\n"]}