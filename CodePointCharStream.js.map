{"version":3,"file":"CodePointCharStream.js","sourceRoot":"","sources":["../../src/CodePointCharStream.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\nimport * as assert from \"assert\";\nimport { CharStream } from \"./CharStream.js\"\nimport { CodePointBuffer } from \"./CodePointBuffer.js\"\nimport { IntStream } from \"./IntStream.js\"\nimport { Interval } from \"./misc/Interval.js\"\nimport { Override } from \"./Decorators.js\"\n\n/**\n * Alternative to {@link ANTLRInputStream} which treats the input\n * as a series of Unicode code points, instead of a series of UTF-16\n * code units.\n *\n * Use this if you need to parse input which potentially contains\n * Unicode values > U+FFFF.\n */\nexport class CodePointCharStream implements CharStream {\n\tprivate readonly _array: Uint8Array | Uint16Array | Int32Array;\n\tprivate readonly _size: number;\n\tprivate readonly _name: string;\n\n\tprivate _position: number;\n\n\t// Use the factory method {@link #fromBuffer(CodePointBuffer)} to\n\t// construct instances of this type.\n\tprotected constructor(array: Uint8Array | Uint16Array | Int32Array, position: number, remaining: number, name: string) {\n\t\t// TODO\n\t\tassert(position === 0);\n\t\tthis._array = array;\n\t\tthis._size = remaining;\n\t\tthis._name = name;\n\t\tthis._position = 0;\n\t}\n\n\tpublic get internalStorage(): Uint8Array | Uint16Array | Int32Array {\n\t\treturn this._array;\n\t}\n\n\t/**\n\t * Constructs a {@link CodePointCharStream} which provides access\n\t * to the Unicode code points stored in {@code codePointBuffer}.\n\t */\n\tpublic static fromBuffer(codePointBuffer: CodePointBuffer): CodePointCharStream;\n\n\t/**\n\t * Constructs a named {@link CodePointCharStream} which provides access\n\t * to the Unicode code points stored in {@code codePointBuffer}.\n\t */\n\tpublic static fromBuffer(codePointBuffer: CodePointBuffer, name: string): CodePointCharStream;\n\tpublic static fromBuffer(codePointBuffer: CodePointBuffer, name?: string): CodePointCharStream {\n\t\tif (name === undefined || name.length === 0) {\n\t\t\tname = IntStream.UNKNOWN_SOURCE_NAME;\n\t\t}\n\n\t\t// Java lacks generics on primitive types.\n\t\t//\n\t\t// To avoid lots of calls to virtual methods in the\n\t\t// very hot codepath of LA() below, we construct one\n\t\t// of three concrete subclasses.\n\t\t//\n\t\t// The concrete subclasses directly access the code\n\t\t// points stored in the underlying array (byte[],\n\t\t// char[], or int[]), so we can avoid lots of virtual\n\t\t// method calls to ByteBuffer.get(offset).\n\t\treturn new CodePointCharStream(\n\t\t\tcodePointBuffer.array(),\n\t\t\tcodePointBuffer.position,\n\t\t\tcodePointBuffer.remaining,\n\t\t\tname);\n\t}\n\n\t@Override\n\tpublic consume(): void {\n\t\tif (this._size - this._position === 0) {\n\t\t\tassert(this.LA(1) === IntStream.EOF);\n\t\t\tthrow new RangeError(\"cannot consume EOF\");\n\t\t}\n\n\t\tthis._position++;\n\t}\n\n\t@Override\n\tpublic get index(): number {\n\t\treturn this._position;\n\t}\n\n\t@Override\n\tpublic get size(): number {\n\t\treturn this._size;\n\t}\n\n\t/** mark/release do nothing; we have entire buffer */\n\t@Override\n\tpublic mark(): number {\n\t\treturn -1;\n\t}\n\n\t@Override\n\tpublic release(marker: number): void {\n\t\t// No default implementation since this stream buffers the entire input\n\t}\n\n\t@Override\n\tpublic seek(index: number): void {\n\t\tthis._position = index;\n\t}\n\n\t@Override\n\tpublic get sourceName(): string {\n\t\treturn this._name;\n\t}\n\n\t@Override\n\tpublic toString(): string {\n\t\treturn this.getText(Interval.of(0, this.size - 1));\n\t}\n\n\t@Override\n\tpublic LA(i: number): number {\n\t\tlet offset: number;\n\t\tswitch (Math.sign(i)) {\n\t\t\tcase -1:\n\t\t\t\toffset = this.index + i;\n\t\t\t\tif (offset < 0) {\n\t\t\t\t\treturn IntStream.EOF;\n\t\t\t\t}\n\n\t\t\t\treturn this._array[offset];\n\n\t\t\tcase 0:\n\t\t\t\t// Undefined\n\t\t\t\treturn 0;\n\n\t\t\tcase 1:\n\t\t\t\toffset = this.index + i - 1;\n\t\t\t\tif (offset >= this.size) {\n\t\t\t\t\treturn IntStream.EOF;\n\t\t\t\t}\n\n\t\t\t\treturn this._array[offset];\n\t\t}\n\n\t\tthrow new RangeError(\"Not reached\");\n\t}\n\n\t/** Return the UTF-16 encoded string for the given interval */\n\t@Override\n\tpublic getText(interval: Interval): string {\n\t\tconst startIdx: number = Math.min(interval.a, this.size);\n\t\tconst len: number = Math.min(interval.b - interval.a + 1, this.size - startIdx);\n\n\t\tif (this._array instanceof Int32Array) {\n\t\t\treturn String.fromCodePoint(...Array.from(this._array.subarray(startIdx, startIdx + len)));\n\t\t} else {\n\t\t\treturn String.fromCharCode(...Array.from(this._array.subarray(startIdx, startIdx + len)));\n\t\t}\n\t}\n}\n"]}